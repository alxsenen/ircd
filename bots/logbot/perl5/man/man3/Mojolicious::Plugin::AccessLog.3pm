.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojolicious::Plugin::AccessLog 3pm"
.TH Mojolicious::Plugin::AccessLog 3pm "2015-07-15" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojolicious::Plugin::AccessLog \- An AccessLog Plugin for Mojolicious
.SH "VERSION"
.IX Header "VERSION"
Version 0.010
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Mojolicious
\&  $self\->plugin(AccessLog => log => \*(Aq/var/log/mojo/access.log\*(Aq);
\&
\&  # Mojolicious::Lite
\&  plugin AccessLog => {log => \*(Aq/var/log/mojo/access.log\*(Aq};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojolicious::Plugin::AccessLog is a plugin to easily generate an
access log.
.SH "OPTIONS"
.IX Header "OPTIONS"
Mojolicious::Plugin::AccessLog supports the following options.
.ie n .SS """log"""
.el .SS "\f(CWlog\fP"
.IX Subsection "log"
Log data destination.
.PP
Default: \f(CW\*(C`$app\->log\->handle\*(C'\fR, so that access log lines go to the
same destination as lines created with \f(CW\*(C`$app\->log\->$method(...)\*(C'\fR.
.PP
This option may be set to one of the following values:
.PP
\fIAbsolute path\fR
.IX Subsection "Absolute path"
.PP
.Vb 1
\&  plugin AccessLog => {log => \*(Aq/var/log/mojo/access.log\*(Aq};
.Ve
.PP
A string specifying an absolute path to the log file. If the file does
not exist already, it will be created, otherwise log output will be
appended to the file. The log directory must exist in every case though.
.PP
\fIRelative path\fR
.IX Subsection "Relative path"
.PP
.Vb 2
\&  # Mojolicious::Lite
\&  plugin AccessLog => {log => \*(Aqlog/access.log\*(Aq};
.Ve
.PP
Similar to absolute path, but relative to the application home directory.
.PP
\fIFile Handle\fR
.IX Subsection "File Handle"
.PP
.Vb 2
\&  open $fh, \*(Aq>\*(Aq, \*(Aq/var/log/mojo/access.log\*(Aq;
\&  plugin AccessLog => {log => $fh};
\&
\&  plugin AccessLog => {log => \e*STDERR};
.Ve
.PP
A file handle to which log lines are printed.
.PP
\fIObject\fR
.IX Subsection "Object"
.PP
.Vb 2
\&  $log = IO::File\->new(\*(Aq/var/log/mojo/access.log\*(Aq, O_WRONLY|O_APPEND);
\&  plugin AccessLog => {log => $log};
\&
\&  $log = Log::Dispatch\->new(...);
\&  plugin AccessLog => {log => $log};
.Ve
.PP
An object, that implements either a \f(CW\*(C`print\*(C'\fR method (like IO::Handle
based classes) or an \f(CW\*(C`info\*(C'\fR method (i.e. Log::Dispatch or
Log::Log4perl).
.PP
\fICallback routine\fR
.IX Subsection "Callback routine"
.PP
.Vb 4
\&  $log = Log::Dispatch\->new(...);
\&  plugin AccessLog => {
\&    log => sub { $log\->log(level => \*(Aqdebug\*(Aq, message => @_) }
\&  };
.Ve
.PP
A code reference. The provided subroutine will be called for every log
line, that it gets as a single argument.
.ie n .SS """format"""
.el .SS "\f(CWformat\fP"
.IX Subsection "format"
A string to specify the format of each line of log output.
.PP
Default: \*(L"common\*(R" (see below).
.PP
This plugin implements a subset of
Apache's LogFormat <http://httpd.apache.org/docs/current/mod/mod_log_config.html>.
.IP "%%" 4
A percent sign.
.ie n .IP "%a" 4
.el .IP "\f(CW%a\fR" 4
.IX Item "%a"
Remote IP-address.
.ie n .IP "%A" 4
.el .IP "\f(CW%A\fR" 4
.IX Item "%A"
Local IP-address.
.ie n .IP "%b" 4
.el .IP "\f(CW%b\fR" 4
.IX Item "%b"
Size of response in bytes, excluding \s-1HTTP\s0 headers. In \s-1CLF\s0 format, i.e.
a '\-' rather than a 0 when no bytes are sent.
.ie n .IP "%B" 4
.el .IP "\f(CW%B\fR" 4
.IX Item "%B"
Size of response in bytes, excluding \s-1HTTP\s0 headers.
.ie n .IP "%D" 4
.el .IP "\f(CW%D\fR" 4
.IX Item "%D"
The time taken to serve the request, in microseconds.
.ie n .IP "%h" 4
.el .IP "\f(CW%h\fR" 4
.IX Item "%h"
Remote host. See \*(L"hostname_lookups\*(R" below.
.ie n .IP "%H" 4
.el .IP "\f(CW%H\fR" 4
.IX Item "%H"
The request protocol.
.ie n .IP "%I" 4
.el .IP "\f(CW%I\fR" 4
.IX Item "%I"
Bytes received, including request and headers. Cannot be zero.
.ie n .IP "%l" 4
.el .IP "\f(CW%l\fR" 4
.IX Item "%l"
The remote logname, not implemented: currently always '\-'.
.ie n .IP "%m" 4
.el .IP "\f(CW%m\fR" 4
.IX Item "%m"
The request method.
.ie n .IP "%O" 4
.el .IP "\f(CW%O\fR" 4
.IX Item "%O"
Bytes sent, including headers. Cannot be zero.
.ie n .IP "%p" 4
.el .IP "\f(CW%p\fR" 4
.IX Item "%p"
The port of the server serving the request.
.ie n .IP "%P" 4
.el .IP "\f(CW%P\fR" 4
.IX Item "%P"
The process \s-1ID\s0 of the child that serviced the request.
.ie n .IP "%r" 4
.el .IP "\f(CW%r\fR" 4
.IX Item "%r"
First line of request: Request method, request \s-1URL\s0 and request protocol.
Synthesized from other fields, so it may not be the request verbatim.
.ie n .IP "%s" 4
.el .IP "\f(CW%s\fR" 4
.IX Item "%s"
The \s-1HTTP\s0 status code of the response.
.ie n .IP "%t" 4
.el .IP "\f(CW%t\fR" 4
.IX Item "%t"
Time the request was received (standard english format).
.ie n .IP "%T" 4
.el .IP "\f(CW%T\fR" 4
.IX Item "%T"
The time taken to serve the request, in seconds.
.ie n .IP "%u" 4
.el .IP "\f(CW%u\fR" 4
.IX Item "%u"
Remote user, or '\-'.
.Sp
The remote user is first looked up in \f(CW\*(C`$c\->req\->env\->{REMOTE_USER}\*(C'\fR
and only if that does not exist then in the first part of
\&\f(CW\*(C`$c\->req\->url\->base\->userinfo\*(C'\fR. This means the latter lookup can be
disabled by setting \f(CW\*(C`$c\->req\->env\->{REMOTE_USER} = undef\*(C'\fR.
.ie n .IP "%U" 4
.el .IP "\f(CW%U\fR" 4
.IX Item "%U"
The \s-1URL\s0 path requested, not including any query string.
.ie n .IP "%v" 4
.el .IP "\f(CW%v\fR" 4
.IX Item "%v"
The name of the server serving the request.
.ie n .IP "%V" 4
.el .IP "\f(CW%V\fR" 4
.IX Item "%V"
The name of the server serving the request.
.PP
In addition, custom values can be referenced, using \f(CW\*(C`%{name}\*(C'\fR,
with one of the mandatory modifier flags \f(CW\*(C`i\*(C'\fR, \f(CW\*(C`o\*(C'\fR, \f(CW\*(C`t\*(C'\fR, \f(CW\*(C`C\*(C'\fR or \f(CW\*(C`e\*(C'\fR:
.IP "%{RequestHeaderName}i" 4
.IX Item "%{RequestHeaderName}i"
The contents of request header \f(CW\*(C`RequestHeaderName\*(C'\fR.
.IP "%{ResponseHeaderName}o" 4
.IX Item "%{ResponseHeaderName}o"
The contents of response header \f(CW\*(C`ResponseHeaderName\*(C'\fR.
.IP "%{Format}t" 4
.IX Item "%{Format}t"
The time, in the form given by \f(CW\*(C`Format\*(C'\fR, which should be in extended
\&\fBstrftime\fR\|(3) format (potentially localized). In addition to the
formats supported by \fBstrftime\fR\|(3), the following format tokens are
supported:
.RS 4
.IP "sec:" 4
.IX Item "sec:"
Number of seconds since the Epoch.
.IP "msec:" 4
.IX Item "msec:"
Number of milliseconds since the Epoch.
.IP "usec:" 4
.IX Item "usec:"
Number of microseconds since the Epoch.
.IP "msec_frac:" 4
.IX Item "msec_frac:"
Millisecond fraction.
.IP "usec_frac:" 4
.IX Item "usec_frac:"
Microsecond fraction.
.RE
.RS 4
.Sp
These tokens can not be combined with each other or \fBstrftime\fR\|(3) formatting
in the same format string. You can use multiple %{format}t tokens instead:
.Sp
.Vb 1
\&  "%{%d/%b/%Y %T}t.%{msec_frac}t %{%z}t"
.Ve
.RE
.IP "%{CookieName}C" 4
.IX Item "%{CookieName}C"
The contents of cookie \f(CW\*(C`CookieName\*(C'\fR in the request sent to the server.
.IP "%{VariableName}e" 4
.IX Item "%{VariableName}e"
Content of the request environment hash variable \f(CW\*(C`VariableName\*(C'\fR:
.Sp
.Vb 1
\&  $c\->req\->env\->{VariableName}
.Ve
.Sp
The request environment hash is set by a \s-1CGI\s0 or \s-1PSGI\s0 server.
.PP
Non-printable bytes are replaced by an escape sequence of \f(CW\*(C`\ex..\*(C'\fR with
\&\f(CW\*(C`..\*(C'\fR being the hexadecimal code of the replaced byte.
.PP
For mostly historical reasons template names \*(L"common\*(R", \*(L"combined\*(R" and
\&\*(L"combinedio\*(R" can also be used:
.IP "common" 4
.IX Item "common"
.Vb 1
\&  %h %l %u %t "%r" %>s %b
.Ve
.IP "combined" 4
.IX Item "combined"
.Vb 1
\&  %h %l %u %t "%r" %>s %b "%{Referer}i" "%{User\-Agent}i"
.Ve
.IP "combinedio" 4
.IX Item "combinedio"
.Vb 1
\&  %h %l %u %t "%r" %>s %b "%{Referer}i" "%{User\-Agent}i" %I %O
.Ve
.PP
These format template names have two drawbacks though:
.IP "1." 4
The username (%u) is not quoted, but a username is allowed to
contain spaces. As a consequence, log file parsers might lose track of
the right fields. To get around this, \fBspaces in usernames are replaced
by \f(CB\*(C`\ex20\*(C'\fB if one of the format template names is used\fR.
.IP "2." 4
The remote logname \f(CW%l\fR as provided by an ident service is not useful
these days and therefore not supported, \f(CW%l\fR is always substituted by
a hyphen (\f(CW"\-"\fR).
.ie n .SS """hostname_lookups"""
.el .SS "\f(CWhostname_lookups\fP"
.IX Subsection "hostname_lookups"
Enable reverse \s-1DNS\s0 hostname lookup if \f(CW\*(C`true\*(C'\fR. Keep in mind, that this
adds latency to every request, if \f(CW%h\fR is part of the log line, because
it requires a \s-1DNS\s0 lookup to complete before the request is finished.
Default is \f(CW\*(C`false\*(C'\fR (= disabled).
.SH "METHODS"
.IX Header "METHODS"
Mojolicious::Plugin::AccessLog inherits all methods from
Mojolicious::Plugin and implements the following new ones.
.ie n .SS """register"""
.el .SS "\f(CWregister\fP"
.IX Subsection "register"
.Vb 6
\&  $plugin\->register(
\&    Mojolicious\->new, {
\&      log => \*(Aq/var/log/mojo/access.log\*(Aq,
\&      format => \*(Aqcombined\*(Aq,
\&    }
\&  );
.Ve
.PP
Register plugin hooks in Mojolicious application.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Plack::Middleware::AccessLog,
Catalyst::Plugin::AccessLog,
<http://httpd.apache.org/docs/current/mod/mod_log_config.html>.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Many thanks to Tatsuhiko Miyagawa for Plack::Middleware::AccessLog
and Andrew Rodland for Catalyst::Plugin::AccessLog.
\&\f(CW\*(C`Mojolicious:Plugin::AccessLog\*(C'\fR borrows a lot of code and ideas from
those modules.
.SH "AUTHOR"
.IX Header "AUTHOR"
Bernhard Graf
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012 \- 2015 Bernhard Graf
.PP
This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
See <http://dev.perl.org/licenses/> for more information.
