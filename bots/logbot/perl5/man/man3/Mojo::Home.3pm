.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo::Home 3pm"
.TH Mojo::Home 3pm "2018-05-24" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo::Home \- Home sweet home
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Mojo::Home;
\&
\&  # Find and manage the project root directory
\&  my $home = Mojo::Home\->new;
\&  $home\->detect;
\&  say $home\->child(\*(Aqtemplates\*(Aq, \*(Aqlayouts\*(Aq, \*(Aqdefault.html.ep\*(Aq);
\&  say "$home";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Mojo::Home is a container for home directories based on Mojo::File.
.SH "METHODS"
.IX Header "METHODS"
Mojo::Home inherits all methods from Mojo::File and implements the
following new ones.
.SS "detect"
.IX Subsection "detect"
.Vb 2
\&  $home = $home\->detect;
\&  $home = $home\->detect(\*(AqMy::App\*(Aq);
.Ve
.PP
Detect home directory from the value of the \f(CW\*(C`MOJO_HOME\*(C'\fR environment variable or
the location of the application class.
.SS "mojo_lib_dir"
.IX Subsection "mojo_lib_dir"
.Vb 1
\&  my $path = $home\->mojo_lib_dir;
.Ve
.PP
Path to \f(CW\*(C`lib\*(C'\fR directory in which Mojolicious is installed as a Mojo::Home
object.
.SS "rel_file"
.IX Subsection "rel_file"
.Vb 1
\&  my $path = $home\->rel_file(\*(Aqfoo/bar.html\*(Aq);
.Ve
.PP
Return a new Mojo::Home object relative to the home directory.
.SH "OPERATORS"
.IX Header "OPERATORS"
Mojo::Home inherits all overloaded operators from Mojo::File.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <https://mojolicious.org>.
