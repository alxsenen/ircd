.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PerlIO::via::Timeout 3pm"
.TH PerlIO::via::Timeout 3pm "2015-07-30" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
PerlIO::via::Timeout \- a PerlIO layer that adds read & write timeout to a handle
.SH "VERSION"
.IX Header "VERSION"
version 0.32
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Errno qw(ETIMEDOUT);
\&  use PerlIO::via::Timeout qw(:all);
\&  open my $fh, \*(Aq<:via(Timeout)\*(Aq, \*(Aqfoo.html\*(Aq;
\&
\&  # set the timeout layer to be 0.5 second read timeout
\&  read_timeout($fh, 0.5);
\&
\&  my $line = <$fh>;
\&  if ($line == undef && 0+$! == ETIMEDOUT) {
\&    # timed out
\&    ...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package implements a PerlIO layer, that adds read / write timeout. This
can be useful to avoid blocking while accessing a handle (file, socket, ...),
and fail after some time.
.PP
The timeout is implemented by using \f(CW\*(C`<select\*(C'\fR> on the handle before
reading/writing.
.PP
\&\fB\s-1WARNING\s0\fR the handle won't timeout if you use \f(CW\*(C`sysread\*(C'\fR or \f(CW\*(C`syswrite\*(C'\fR on it,
because these functions works at a lower level. However if you're trying to
implement a timeout for a socket, see IO::Socket::Timeout that implements
exactly that.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "read_timeout"
.IX Subsection "read_timeout"
.Vb 4
\&  # set a read timeout of 2.5 seconds
\&  read_timeout($fh, 2.5);
\&  # get the current read timeout
\&  my $secs = read_timeout($fh);
.Ve
.PP
Getter / setter of the read timeout value.
.SS "write_timeout"
.IX Subsection "write_timeout"
.Vb 4
\&  # set a write timeout of 2.5 seconds
\&  write_timeout($fh, 2.5);
\&  # get the current write timeout
\&  my $secs = write_timeout($fh);
.Ve
.PP
Getter / setter of the write timeout value.
.SS "enable_timeout"
.IX Subsection "enable_timeout"
.Vb 1
\&  enable_timeout($fh);
.Ve
.PP
Equivalent to setting timeout_enabled to 1
.SS "disable_timeout"
.IX Subsection "disable_timeout"
.Vb 1
\&  disable_timeout($fh);
.Ve
.PP
Equivalent to setting timeout_enabled to 0
.SS "timeout_enabled"
.IX Subsection "timeout_enabled"
.Vb 6
\&  # disable timeout
\&  timeout_enabled($fh, 0);
\&  # enable timeout
\&  timeout_enabled($fh, 1);
\&  # get the current status
\&  my $is_enabled = timeout_enabled($fh);
.Ve
.PP
Getter / setter of the timeout enabled flag.
.SS "has_timeout_layer"
.IX Subsection "has_timeout_layer"
.Vb 4
\&  if (has_timeout_layer($fh)) {
\&    # set a write timeout of 2.5 seconds
\&    write_timeout($fh, 2.5);
\&  }
.Ve
.PP
Returns wether the given filehandle is managed by PerlIO::via::Timeout.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "PerlIO::via" 4
.IX Item "PerlIO::via"
.SH "THANKS TO"
.IX Header "THANKS TO"
.PD 0
.IP "Vincent Pit" 4
.IX Item "Vincent Pit"
.IP "Christian Hansen" 4
.IX Item "Christian Hansen"
.IP "Leon Timmmermans" 4
.IX Item "Leon Timmmermans"
.PD
.SH "AUTHOR"
.IX Header "AUTHOR"
Damien \*(L"dams\*(R" Krotkine
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2013 by Damien \*(L"dams\*(R" Krotkine.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
