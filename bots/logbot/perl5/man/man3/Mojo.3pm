.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Mojo 3pm"
.TH Mojo 3pm "2018-06-11" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Mojo \- Web development toolkit
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  # HTTP/WebSocket user agent
\&  use Mojo::UserAgent;
\&  my $ua = Mojo::UserAgent\->new;
\&  say $ua\->get(\*(Aqwww.mojolicious.org\*(Aq)\->result\->headers\->server;
\&
\&  # HTML/XML DOM parser with CSS selectors
\&  use Mojo::DOM;
\&  my $dom = Mojo::DOM\->new(\*(Aq<div><b>Hello Mojo!</b></div>\*(Aq);
\&  say $dom\->at(\*(Aqdiv > b\*(Aq)\->text;
\&
\&  # Perl\-ish templates
\&  use Mojo::Template;
\&  my $mt = Mojo::Template\->new(vars => 1);
\&  say $mt\->render(\*(AqHello <%= $what %>!\*(Aq, {what => \*(AqMojo\*(Aq});
\&
\&  # HTTP/WebSocket server
\&  use Mojo::Server::Daemon;
\&  my $daemon = Mojo::Server::Daemon\->new(listen => [\*(Aqhttp://*:8080\*(Aq]);
\&  $daemon\->unsubscribe(\*(Aqrequest\*(Aq)\->on(request => sub {
\&    my ($daemon, $tx) = @_;
\&    $tx\->res\->code(200);
\&    $tx\->res\->body(\*(AqHello Mojo!\*(Aq);
\&    $tx\->resume;
\&  });
\&  $daemon\->run;
\&
\&  # Event loop
\&  use Mojo::IOLoop;
\&  for my $seconds (1 .. 5) {
\&    Mojo::IOLoop\->timer($seconds => sub { say $seconds });
\&  }
\&  Mojo::IOLoop\->start;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A powerful web development toolkit, with all the basic tools and helpers needed
to write simple web applications and higher level web frameworks, such as
Mojolicious. Some of the most commonly used tools are Mojo::UserAgent,
Mojo::DOM, Mojo::JSON, Mojo::Server::Daemon, Mojo::Server::Prefork,
Mojo::IOLoop and Mojo::Template.
.PP
See Mojolicious::Guides for more!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mojolicious, Mojolicious::Guides, <https://mojolicious.org>.
