.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Memoize::ExpireLRU 3pm"
.TH Memoize::ExpireLRU 3pm "2016-07-06" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Memoize::ExpireLRU \- Expiry plug\-in for Memoize that adds LRU cache expiration
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Memoize;
\&
\&    memoize(\*(Aqslow_function\*(Aq,
\&            TIE => [Memoize::ExpireLRU,
\&                    CACHESIZE => n,
\&                   ]);
.Ve
.PP
Note that one need not \f(CW\*(C`use\*(C'\fR this module.
It will be found by the Memoize module.
.PP
The argument to \f(CW\*(C`CACHESIZE\*(C'\fR must be an integer.
Normally, this is all that is needed.
Additional options are available:
.PP
.Vb 3
\&        TUNECACHESIZE => m,
\&        INSTANCE      => \*(Aqdescriptive_name\*(Aq,
\&        TIE           => \*(Aq[DB_File, $filename, O_RDWR | O_CREATE, 0666]\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For the theory of Memoization, please see the Memoize module
documentation. This module implements an expiry policy for Memoize
that follows \s-1LRU\s0 semantics, that is, the last n results, where n is
specified as the argument to the \f(CW\*(C`CACHESIZE\*(C'\fR parameter, will be
cached.
.SH "PERFORMANCE TUNING"
.IX Header "PERFORMANCE TUNING"
It is often quite difficult to determine what size cache will give
optimal results for a given function. To aid in determining this,
ExpireLRU includes cache tuning support. Enabling this causes a
definite performance hit, but it is often useful before code is
released to production.
.PP
To enable cache tuning support, simply specify the optional
\&\f(CW\*(C`TUNECACHESIZE\*(C'\fR parameter with a size greater than that of the
\&\f(CW\*(C`CACHESIZE\*(C'\fR parameter.
.PP
When the program exits, a set of statistics will be printed to
stderr. If multiple routines have been memoized, separate sets of
statistics are printed for each routine. The default names are
somewhat cryptic: this is the purpose of the \f(CW\*(C`INSTANCE\*(C'\fR
parameter. The value of this parameter will be used as the identifier
within the statistics report.
.SH "DIAGNOSTIC METHODS"
.IX Header "DIAGNOSTIC METHODS"
Two additional routines are available but not
exported. Memoize::ExpireLRU::ShowStats returns a string identical to
the statistics report printed to \s-1STDERR\s0 at the end of the program if
test caches have been enabled; Memoize::ExpireLRU::DumpCache takes the
instance name of a memoized function as a parameter, and returns a
string describing the current state of that instance.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Memoize
.SH "REPOSITORY"
.IX Header "REPOSITORY"
<https://github.com/neilb/Memoize\-ExpireLRU>
.SH "AUTHOR"
.IX Header "AUTHOR"
Brent B. Powers (B2Pi), Powers@B2Pi.com
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 1999 by Brent B. Powers.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
