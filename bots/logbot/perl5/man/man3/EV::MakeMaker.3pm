.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "EV::MakeMaker 3pm"
.TH EV::MakeMaker 3pm "2008-04-07" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
EV::MakeMaker \- MakeMaker glue for the C\-level EV API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This allows you to access some libevent functionality from other perl
modules.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
For optimal performance, hook into \s-1EV\s0 at the C\-level.  You'll need
to make changes to your \f(CW\*(C`Makefile.PL\*(C'\fR and add code to your \f(CW\*(C`xs\*(C'\fR /
\&\f(CW\*(C`c\*(C'\fR file(s).
.SH "HOW TO"
.IX Header "HOW TO"
.SS "Makefile.PL"
.IX Subsection "Makefile.PL"
.Vb 1
\&  use EV::MakeMaker qw(ev_args);
\&
\&  # ... set up %args ...
\&
\&  WriteMakefile (ev_args (%args));
.Ve
.SS "\s-1XS\s0"
.IX Subsection "XS"
.Vb 1
\&  #include "EVAPI.h"
\&
\&  BOOT:
\&    I_EV_API ("YourModule");
.Ve
.SH "API"
.IX Header "API"
See the \s-1EVAPI\s0.h <http://cvs.schmorp.de/EV/EV/EVAPI.h> header, which you should include instead
of \fIev.h\fR.
.PP
In short, all the functions and macros from \fIev.h\fR should work, except
that the trailing underscore macros (\f(CW\*(C`EV_A_\*(C'\fR, \f(CW\*(C`EV_DEFAULT_\*(C'\fR) are not
available (except \f(CW\*(C`EV_P_\*(C'\fR :).
.PP
Multiplicity is enabled.
.PP
The \f(CW\*(C`data\*(C'\fR member in each watcher is of type \f(CW\*(C`SV *\*(C'\fR and not \f(CW\*(C`void *\*(C'\fR
(this might change at some point).
.SH "EXAMPLE"
.IX Header "EXAMPLE"
The EV::Glib, \s-1EV::ADNS\s0 and Glib::EV modules all give nice
examples on how to use this module.
.PP
Here are some \fI.xs\fR fragments taken from \s-1EV::ADNS\s0 that should get you
going:
.PP
.Vb 1
\&  #include "EVAPI.h"
\&
\&  static ev_prepare pw;
\&  static ev_idle iw;
\&
\&  static void
\&  idle_cb (EV_P_ ev_idle *w, int revents)
\&  {
\&    ev_idle_stop (EV_A, w);
\&  }
\&
\&  MODULE = ...
\&
\&  BOOT:
\&  {
\&    I_EV_API ("EV::ADNS");
\&    ev_prepare_init (&pw, prepare_cb);
\&    ev_init (&iw, idle_cb); ev_set_priority (&iw, EV_MINPRI);
\&    ev_idle_start (EV_DEFAULT, &iw);
\&  }
.Ve
