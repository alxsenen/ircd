.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Digest::xxHash 3pm"
.TH Digest::xxHash 3pm "2020-04-29" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Digest::xxHash \- xxHash Implementation For Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Digest::xxHash qw[xxhash32 xxhash32_hex xxhash64 xxhash64_hex];
\&
\&    my $hash = xxhash32( $data, $seed );
\&    my $hex  = xxhash32_hex( $data, $seed );
\&
\&    my $hash_64 = xxhash64( $data, $seed );
\&    my $hex_64  = xxhash64_hex( $data, $seed );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
xxHash is an extremely fast algorithm that claims to work at speeds close to \s-1RAM\s0
limits. This is a wrapper of both the 32\- and 64\-bit hash functions.
.SH "FUNCTIONAL INTERFACE"
.IX Header "FUNCTIONAL INTERFACE"
These functions are easy to use but aren't very flexible.
.ie n .SS "$h = xxhash32( $data, $seed )"
.el .SS "\f(CW$h\fP = xxhash32( \f(CW$data\fP, \f(CW$seed\fP )"
.IX Subsection "$h = xxhash32( $data, $seed )"
Calculates a 32 bit hash.
.ie n .SS "$h = xxhash32_hex( $data, $seed )"
.el .SS "\f(CW$h\fP = xxhash32_hex( \f(CW$data\fP, \f(CW$seed\fP )"
.IX Subsection "$h = xxhash32_hex( $data, $seed )"
Calculates a 32 bit hash and returns it as a hex string.
.ie n .SS "$h = xxhash64( $data, $seed )"
.el .SS "\f(CW$h\fP = xxhash64( \f(CW$data\fP, \f(CW$seed\fP )"
.IX Subsection "$h = xxhash64( $data, $seed )"
Calculates a 64 bit hash.
.ie n .SS "$h = xxhash64_hex( $data, $seed )"
.el .SS "\f(CW$h\fP = xxhash64_hex( \f(CW$data\fP, \f(CW$seed\fP )"
.IX Subsection "$h = xxhash64_hex( $data, $seed )"
Calculates a 64 bit hash and returns it as a hex string.
.SH "SPEED"
.IX Header "SPEED"
According to the xxhash project's website, when run in a single thread on a
32bit Windows 7 box with a 3GHz Core 2 Duo processor, xxhash looks a little
like:
.PP
.Vb 10
\&    Name            Speed       Q.Score   Author
\&    xxHash          5.4 GB/s     10
\&        CrapWow         3.2 GB/s      2       Andrew
\&        MumurHash 3a    2.7 GB/s     10       Austin Appleby
\&        SpookyHash      2.0 GB/s     10       Bob Jenkins
\&        SBox            1.4 GB/s      9       Bret Mulvey
\&        Lookup3         1.2 GB/s      9       Bob Jenkins
\&        SuperFastHash   1.2 GB/s      1       Paul Hsieh
\&        CityHash64      1.05 GB/s    10       Pike & Alakuijala
\&        FNV             0.55 GB/s     5       Fowler, Noll, Vo
\&        CRC32           0.43 GB/s     9
\&        MD5\-32          0.33 GB/s    10       Ronald L. Rivest
\&        SHA1\-32         0.28 GB/s    10
.Ve
.PP
Q.Score is a measure of \*(L"quality\*(R" of the hash function. It depends on
successfully passing
SMHasher test set <http://code.google.com/p/smhasher/wiki/SMHasher>. 10 is a
perfect score. Hash functions with a Q.score < 5 are not listed in this
table.
.PP
A 64\-bits version, named \s-1XXH64,\s0 is available since (upstream) r35.
It offers much better speed, but for 64\-bits applications only.
.PP
.Vb 3
\&        Name     Speed on 64 bits    Speed on 32 bits
\&        XXH64       13.8 GB/s            1.9 GB/s
\&        XXH32        6.8 GB/s            6.0 GB/s
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
xxHash is covered by the \s-1BSD\s0 license.
.PP
License-wise, I don't actually care about the wrapper I've written.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sanko Robinson <sanko@cpan.org>
.PP
xxHash by Yann Collet.
